// Generated by CoffeeScript 1.7.1
(function() {
  var ClientSessions, DebuggerIndexHTML, DebuggerIndexHTMLTemplate, PORT_DEBUG, PORT_PROXY, PORT_TARGET, PORT_V8, PRE_D, PRE_P, PRE_T, ProxyDebug, ProxyTarget, appEnv, auth, authRequestFn, bodyParser, cfenv, child_process, clientSessions, cookie, cookieParser, crypto, express, fs, handlebars, http, httpProxy, kill, passport, path, q, resetMessage, setIsAuthenticated, startDebugger, startProxy, startTarget, utils, _,
    __slice = [].slice;

  fs = require("fs");

  path = require("path");

  crypto = require("crypto");

  child_process = require("child_process");

  q = require("q");

  _ = require("underscore");

  http = require("http");

  cfenv = require("cfenv");

  cookie = require("cookie");

  express = require("express");

  passport = require("passport");

  httpProxy = require("http-proxy");

  bodyParser = require("body-parser");

  handlebars = require("handlebars");

  cookieParser = require("cookie-parser");

  clientSessions = require("client-sessions");

  auth = require("./auth");

  utils = require("./utils");

  DebuggerIndexHTML = fs.readFileSync("web-debugger/index.html", "utf8");

  DebuggerIndexHTMLTemplate = handlebars.compile(DebuggerIndexHTML);

  auth.setUser({
    userid: "test",
    password: "test"
  });

  appEnv = cfenv.getAppEnv();

  PORT_PROXY = appEnv.port;

  PORT_TARGET = appEnv.port + 1;

  PORT_DEBUG = appEnv.port + 2;

  PORT_V8 = 5858;

  ProxyTarget = new httpProxy.createProxyServer({
    target: {
      host: "localhost",
      port: PORT_TARGET
    }
  });

  ProxyDebug = new httpProxy.createProxyServer({
    target: {
      host: "localhost",
      port: PORT_DEBUG
    }
  });

  PRE_T = "target:";

  PRE_D = "debug: ";

  PRE_P = "proxy:";

  ClientSessions = null;

  exports.run = function(args, opts) {
    var debugr, match, sessionOptions, target;
    opts["break"] = !!opts["break"];
    opts.verbose = !!opts.verbose;
    if (opts.debugPrefix == null) {
      opts.debugPrefix = "--debugger";
    }
    match = opts.debugPrefix.match(/\/*(.*)\/*/);
    opts.debugPrefix = "/" + match[1];
    utils.vlog("version: " + utils.VERSION);
    utils.vlog("args:    " + (args.join(' ')));
    utils.vlog("opts:    " + (utils.JL(opts)));
    sessionOptions = {
      cookieName: "cf-node-debug",
      requestKey: "session",
      secret: auth.getUser().password,
      duration: 1000 * 60 * 60 * 24 * 7 * 2,
      cookie: {
        path: "" + opts.debugPrefix + "/",
        ephemeral: false,
        httpOnly: true,
        secure: false
      }
    };
    ClientSessions = clientSessions(sessionOptions);
    target = startTarget(args, opts);
    debugr = startDebugger(opts);
    startProxy(opts);
    return process.on("exit", function(code) {
      utils.log("" + PRE_P + " exiting; code: " + code);
      kill("target", target);
      return kill("debugger", debugr);
    });
  };

  kill = function(label, proc) {
    var e;
    try {
      utils.log("killing " + label);
      return proc.kill();
    } catch (_error) {
      e = _error;
      return utils.log("killing " + label + "; exception: " + e);
    }
  };

  startTarget = function(args, opts) {
    var child, env, options, stdio;
    if (_.isString(args)) {
      args = args.trim().split(/\s+/);
    }
    if (args[0] === "node") {
      args.shift();
    }
    if (opts["break"]) {
      args.unshift("--debug-brk");
    } else {
      args.unshift("--debug");
    }
    env = _.clone(process.env);
    env.PORT = PORT_TARGET;
    env.VCAP_APP_PORT = PORT_TARGET;
    stdio = ["ignore", "pipe", "pipe"];
    options = {
      env: env,
      stdio: stdio
    };
    utils.log("" + PRE_T + " starting `node " + (args.join(' ')) + "`");
    child = child_process.spawn("node", args, options);
    child.stdout.pipe(process.stdout);
    child.stderr.pipe(process.stderr);
    child.on("error", function(err) {
      return utils.log("" + PRE_T + " exception: " + err);
    });
    child.on("exit", function(code) {
      return utils.log("" + PRE_T + " exited with code: " + code);
    });
    return child;
  };

  startDebugger = function(opts) {
    var args, child, nodeInspector, options, stdio;
    nodeInspector = require.resolve("node-inspector");
    nodeInspector = path.join(nodeInspector, "..", "..", ".bin", "node-inspector");
    nodeInspector = path.relative(process.cwd(), nodeInspector);
    args = [nodeInspector, "--web-port=" + PORT_DEBUG];
    stdio = ["ignore", "pipe", "pipe"];
    options = {
      stdio: stdio
    };
    utils.log("" + PRE_D + " starting `node " + (args.join(' ')) + "`");
    child = child_process.spawn("node", args, options);
    child.stdout.pipe(process.stdout);
    child.stderr.pipe(process.stderr);
    child.on("error", function(err) {
      return utils.log("" + PRE_D + " exception: " + err);
    });
    child.on("exit", function(code) {
      return utils.log("" + PRE_D + " exited with code: " + code);
    });
    return child;
  };

  startProxy = function(opts) {
    var debugApp, debugPrefix, debugPrefixSlash, proxyApp, proxyServer;
    debugPrefix = opts.debugPrefix;
    debugPrefixSlash = "" + debugPrefix + "/";
    ProxyTarget.on("error", function(err, request, response) {
      var socket;
      utils.log("" + PRE_P + " target exception: " + err);
      socket = request;
      if (response.writeHead != null) {
        response.writeHead(500, {
          "Content-Type": "text/plain"
        });
        return response.end("error processing request; check server console.");
      } else if (socket.close != null) {
        return socket.close();
      }
    });
    ProxyDebug.on("error", function(err, request, response) {
      var socket;
      utils.log("" + PRE_P + " debug exception: " + err);
      socket = request;
      if (response.writeHead != null) {
        response.writeHead(500, {
          "Content-Type": "text/plain"
        });
        return response.end("error processing request; check server console.");
      } else if (socket.close != null) {
        return socket.close();
      }
    });
    debugApp = express.Router();
    debugApp.use(ClientSessions);
    debugApp.use(resetMessage);
    debugApp.use(bodyParser());
    debugApp.use(passport.initialize());
    debugApp.use(setIsAuthenticated);
    debugApp.use("/bower_components", express["static"]("bower_components"));
    debugApp.use("/cf-node-debug", express["static"]("web-debugger/cf-node-debug"));
    debugApp.get("/", function(request, response) {
      var data, indexHTML;
      if (!request.originalUrl.match(/.*\/$/)) {
        response.redirect(debugPrefixSlash);
        return;
      }
      utils.log("debugApp / request.session: " + (utils.JL(request.session)));
      utils.log("debugApp / isAuthenticated: " + request.isAuthenticated);
      data = {
        userid: request.session.userid || "[not logged in]",
        message: request.session.message,
        messageShow: request.session.messageShow,
        loggedOut: "",
        loggedIn: ""
      };
      if (request.isAuthenticated) {
        data.loggedOut = "hidden";
      } else {
        data.loggedIn = "hidden";
      }
      indexHTML = DebuggerIndexHTMLTemplate(data);
      return response.send(indexHTML);
    });
    debugApp.get("/login", function(request, response, next) {
      return response.redirect(debugPrefixSlash);
    });
    debugApp.post("/login", function(request, response, next) {
      var authr;
      authr = passport.authenticate("local", function(err, user, info) {
        if (err != null) {
          request.session.message = err.message;
          return response.redirect(debugPrefixSlash);
        }
        if (!user) {
          request.session.message = info.message;
          return response.redirect(debugPrefixSlash);
        }
        request.session.userid = user.userid;
        request.session.password = user.password;
        return response.redirect(debugPrefixSlash);
      });
      return authr(request, response, next);
    });
    debugApp.post("/logout", function(request, response) {
      request.session.userid = "";
      request.session.password = "";
      return response.redirect(debugPrefixSlash);
    });
    debugApp.get("/logout", function(request, response, next) {
      return response.redirect(debugPrefixSlash);
    });
    debugApp.use(function(request, response, next) {
      if (request.isAuthenticated) {
        return next();
      }
      return response.redirect(debugPrefixSlash);
    });
    debugApp.use(ProxyDebug.web.bind(ProxyDebug));
    proxyApp = express();
    proxyApp.use(debugPrefix, debugApp);
    proxyApp.use(ProxyTarget.web.bind(ProxyTarget));
    proxyServer = http.createServer(proxyApp);
    proxyServer.on("upgrade", function(request, socket, head) {
      var empty, rest, root, _ref;
      _ref = request.url.split(path.sep), empty = _ref[0], root = _ref[1], rest = 3 <= _ref.length ? __slice.call(_ref, 2) : [];
      if (("/" + root) !== debugPrefix) {
        ProxyTarget.ws(request, socket, head);
        return;
      }
      return ClientSessions(request, {}, function() {
        return setIsAuthenticated(request, {}, function() {
          if (!request.isAuthenticated) {
            return socket.destroy();
          }
          return ProxyDebug.ws(request, socket, head);
        });
      });
    });
    utils.log("" + PRE_P + " starting server at: " + appEnv.url);
    utils.log("" + PRE_P + " access debugger at: " + appEnv.url + debugPrefix + "/inspector.html");
    return proxyServer.listen(PORT_PROXY);
  };

  resetMessage = function(request, response, next) {
    request.session.message = "";
    request.session.messageShow = "hidden";
    return next();
  };

  setIsAuthenticated = function(request, response, next) {
    var password, user, userid, _ref;
    _ref = request.session, userid = _ref.userid, password = _ref.password;
    user = auth.getUser();
    request.isAuthenticated = false;
    if ((userid === user.userid) && (password === user.password)) {
      request.isAuthenticated = true;
    }
    return next();
  };

  authRequestFn = function(request, response, next, err, user, info, redirect) {};

}).call(this);
