// Generated by CoffeeScript 1.7.1
(function() {
  var PORT_DEBUG, PORT_PROXY, PORT_TARGET, PORT_V8, PRE_D, PRE_P, PRE_T, ProxyDebug, ProxyTarget, appEnv, cfenv, child_process, http, httpProxy, kill, path, q, startDebugger, startProxy, startTarget, utils, _,
    __slice = [].slice;

  path = require("path");

  child_process = require("child_process");

  q = require("q");

  _ = require("underscore");

  http = require("http");

  cfenv = require("cfenv");

  httpProxy = require("http-proxy");

  utils = require("./utils");

  appEnv = cfenv.getAppEnv();

  PORT_PROXY = appEnv.port;

  PORT_TARGET = appEnv.port + 1;

  PORT_DEBUG = appEnv.port + 2;

  PORT_V8 = 5858;

  ProxyTarget = new httpProxy.createProxyServer({
    target: {
      host: "localhost",
      port: PORT_TARGET
    }
  });

  ProxyDebug = new httpProxy.createProxyServer({
    target: {
      host: "localhost",
      port: PORT_DEBUG
    }
  });

  PRE_T = "target:";

  PRE_D = "debug: ";

  PRE_P = "proxy:";

  exports.run = function(args, opts) {
    var debugr, target;
    utils.vlog("version: " + utils.VERSION);
    utils.vlog("args:    " + (args.join(' ')));
    utils.vlog("opts:    " + (utils.JL(opts)));
    target = startTarget(args, opts);
    debugr = startDebugger(opts);
    startProxy(opts);
    return process.on("exit", function(code) {
      utils.log("" + PRE_P + " exiting; code: " + code);
      kill("target", target);
      return kill("debugger", debugr);
    });
  };

  kill = function(label, proc) {
    var e;
    try {
      utils.log("killing " + label);
      return proc.kill();
    } catch (_error) {
      e = _error;
      return utils.log("killing " + label + "; exception: " + e);
    }
  };

  startTarget = function(args, opts) {
    var child, env, options, stdio;
    if (_.isString(args)) {
      args = args.trim().split(/\s+/);
    }
    if (args[0] === "node") {
      args.shift();
    }
    if (opts["break"]) {
      args.unshift("--debug-brk");
    } else {
      args.unshift("--debug");
    }
    env = _.clone(process.env);
    env.PORT = PORT_TARGET;
    env.VCAP_APP_PORT = PORT_TARGET;
    stdio = ["ignore", "pipe", "pipe"];
    options = {
      env: env,
      stdio: stdio
    };
    utils.log("" + PRE_T + " starting `node " + (args.join(' ')) + "`");
    child = child_process.spawn("node", args, options);
    child.stdout.pipe(process.stdout);
    child.stderr.pipe(process.stderr);
    child.on("error", function(err) {
      return utils.log("" + PRE_T + " exception: " + err);
    });
    child.on("exit", function(code) {
      return utils.log("" + PRE_T + " exited with code: " + code);
    });
    return child;
  };

  startDebugger = function(opts) {
    var args, child, options, stdio;
    args = ["node_modules/.bin/node-inspector", "--web-port=" + PORT_DEBUG];
    stdio = ["ignore", "pipe", "pipe"];
    options = {
      stdio: stdio
    };
    utils.log("" + PRE_D + " starting `node " + (args.join(' ')) + "`");
    child = child_process.spawn("node", args, options);
    child.stdout.pipe(process.stdout);
    child.stderr.pipe(process.stderr);
    child.on("error", function(err) {
      return utils.log("" + PRE_D + " exception: " + err);
    });
    child.on("exit", function(code) {
      return utils.log("" + PRE_D + " exited with code: " + code);
    });
    return child;
  };

  startProxy = function(opts) {
    var debugPrefix, proxyServer;
    debugPrefix = opts["debug-prefix"];
    ProxyTarget.on("error", function(err, request, response) {
      utils.log("" + PRE_P + " target exception: " + err);
      response.writeHead(500, {
        "Content-Type": "text/plain"
      });
      return response.end("error processing request; check server console.");
    });
    ProxyDebug.on("error", function(err, request, response) {
      utils.log("" + PRE_P + " debug exception: " + err);
      response.writeHead(500, {
        "Content-Type": "text/plain"
      });
      return response.end("error processing request; check server console.");
    });
    proxyServer = http.createServer(function(request, response) {
      var empty, rest, root, _ref;
      _ref = request.url.split(path.sep), empty = _ref[0], root = _ref[1], rest = 3 <= _ref.length ? __slice.call(_ref, 2) : [];
      if (root === debugPrefix) {
        request.url = "/" + (rest.join('/'));
        return ProxyDebug.web(request, response);
      } else {
        return ProxyTarget.web(request, response);
      }
    });
    proxyServer.on("upgrade", function(request, socket, head) {
      var empty, rest, root, _ref;
      _ref = request.url.split(path.sep), empty = _ref[0], root = _ref[1], rest = 3 <= _ref.length ? __slice.call(_ref, 2) : [];
      if (root === debugPrefix) {
        request.url = "/" + (rest.join('/'));
        return ProxyDebug.ws(request, socket, head);
      } else {
        return ProxyTarget.ws(request, socket, head);
      }
    });
    utils.log("" + PRE_P + " starting server at: " + appEnv.url);
    utils.log("" + PRE_P + " access debugger at: " + appEnv.url + "/" + debugPrefix + "/inspector.html");
    return proxyServer.listen(PORT_PROXY);
  };

}).call(this);
