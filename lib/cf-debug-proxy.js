// Generated by CoffeeScript 1.7.1
(function() {
  var PORT_PROXY, PORT_TARGET, PORT_V8, cfCore, cfEnv, child_process, http, httpProxy, q, startDebug, startProxy, startTarget, utils, _;

  child_process = require("child_process");

  q = require("q");

  _ = require("underscore");

  http = require("http");

  cfEnv = require("cf-env");

  httpProxy = require("http-proxy");

  utils = require("./utils");

  cfCore = cfEnv.getCore();

  PORT_PROXY = cfCore.port;

  PORT_TARGET = cfCore.port + 1;

  PORT_V8 = 5858;

  exports.run = function(args, opts) {
    utils.vlog("version: " + utils.VERSION);
    utils.vlog("args: " + (args.join(' ')));
    utils.vlog("opts: " + (utils.JL(opts)));
    startTarget(args, opts);
    startDebug(opts);
    return startProxy(opts);
  };

  startTarget = function(args, opts) {
    var child, env, options, stdio;
    if (_.isString(args)) {
      args = args.trim().split(/\s+/);
    }
    if (args[0] === "node") {
      args.shift();
    }
    if (opts["break"]) {
      args.unshift("--debug-brk");
    } else {
      args.unshift("--debug");
    }
    env = _.clone(process.env);
    env.PORT = PORT_TARGET;
    env.VCAP_APP_PORT = PORT_TARGET;
    stdio = ["ignore", "pipe", "pipe"];
    options = {
      env: env,
      stdio: stdio
    };
    utils.log("starting target process `node " + (args.join(' ')) + "`");
    utils.log("target process PORT set to " + env.PORT);
    child = child_process.spawn("node", args, options);
    child.stdout.pipe(process.stdout);
    child.stderr.pipe(process.stderr);
    child.on("error", function(err) {
      utils.log("error running target process: " + err);
      throw err;
    });
    return child.on("exit", function(code) {
      var message;
      message = "target process exited with code: " + code;
      utils.log(message);
      throw new Error(message);
    });
  };

  startDebug = function(opts) {};

  startProxy = function(opts) {
    var proxy, proxyServer;
    proxy = httpProxy.createProxyServer({
      target: {
        host: "localhost",
        port: PORT_TARGET
      }
    });
    proxyServer = http.createServer(function(request, response) {
      return proxy.web(request, response);
    });
    proxyServer.on("upgrade", function(request, socket, head) {
      if (request.url === ("/" + opts.websocket)) {
        return connectDebug(request, socket, head);
      }
      return proxy.ws(request, socket, head);
    });
    proxy.on("error", function(err, request, response) {
      utils.log("error in proxy: " + err);
      response.writeHead(500, {
        "Content-Type": "text/plain"
      });
      return response.end("error processing request; check server console.");
    });
    utils.log("proxy server starting on:      " + cfCore.url);
    return proxyServer.listen(PORT_PROXY, function() {
      utils.log("proxy server started on:       " + cfCore.url);
      utils.log("listening for v8 websocket on: " + cfCore.url + "/" + opts.websocket);
      return utils.log("everything else goes to:       localhost:" + PORT_TARGET);
    });
  };

}).call(this);
