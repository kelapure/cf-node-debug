// Generated by CoffeeScript 1.7.1
(function() {
  var V8Messenger, events, net, q, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  net = require("net");

  events = require("events");

  q = require("q");

  utils = require("../common/utils");

  exports.create = function(port) {
    return new V8Messenger(socket);
  };

  V8Messenger = (function(_super) {
    __extends(V8Messenger, _super);

    function V8Messenger(socket) {
      this._deferred = {};
      this._seq = 1;
      this._initMessage();
      socket.on("data", (function(_this) {
        return function(data) {
          return _this._onData(data);
        };
      })(this));
    }

    V8Messenger.prototype.send = function(msg) {
      var msgString;
      msg.type = "request";
      msg.seq = this._seq++;
      this._deferreds[msg.seq] = q.defer();
      msgString = JSON.stringify(msg);
      msgString = "Content-Length: " + msgString.length + "\r\n\r\n" + msgString;
      socket.write(msgString, "utf8");
      return this._deferreds[msg.seq].promise;
    };

    V8Messenger.prototype._initMessage = function() {
      this.inHeaders = true;
      this.headers = {};
      this.buffer = "";
      return this.contentLength = 0;
    };

    V8Messenger.prototype._onMessage = function(body) {
      var deferred, err, msg;
      msg = JSON.parse(body);
      if (msg.type === "event") {
        return this.emit("event", body);
      } else {
        deferred = this._deferreds[msg.request_seq];
        if (deferred == null) {
          return;
        }
        delete this._deferreds[msg.request_seq];
        if (msg.success) {
          return deferred.resolve(msg);
        } else {
          err = new Error(msg.message);
          err.isV8 = true;
          return deferred.reject(err);
        }
      }
    };

    V8Messenger.prototype._onData = function(data) {
      var body, delim, key, line, val;
      this.buffer += data;
      while (true) {
        if (!this.inHeaders) {
          if (this.buffer.length < this.contentLength) {
            return;
          }
          body = this.buffer.substr(0, this.contentLength);
          this.buffer = this.buffer.substr(this.contentLength);
          this._onMessage(body);
          this._initMessage();
          continue;
        }
        delim = this.buffer.indexOf("\r\n");
        if (-1 === delim) {
          return;
        }
        line = this.buffer.substr(line, delim);
        this.buffer = this.buffer.substr(delim + 2);
        if (line === "") {
          this.inHeaders = false;
          continue;
        }
        delim = line.indexOf(":");
        if (-1 === delim) {
          key = line;
          val = "";
        } else {
          key = utils.trim(line.substr(0, delim));
          val = utils.trim(line.substr(delim + 1));
        }
        this.headers[key] = val;
        if (key === "Content-Length") {
          this.contentLength = parseInt(val, 10);
        }
      }
    };

    return V8Messenger;

  })(events.EventEmitter);

}).call(this);
